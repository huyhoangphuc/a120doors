--effect0
wait()
coroutine.wrap(function()
local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)

local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)
end)()
--

--effect1
wait(0.1)
coroutine.wrap(function()
local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)

local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)
end)()
--

--effect2
wait(0.2)
coroutine.wrap(function()
local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)

local CameraShaker = require(game.ReplicatedStorage.CameraShaker)
local camara = game.Workspace.CurrentCamera

local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(cf)
	camara.CFrame = camara.CFrame * cf
end)


camShake:Start()
camShake:Shake(CameraShaker.Presets.Earthquake)
end)()
--

caa = 0
tween = game:GetService("TweenService")
local TestMultplayer = true
if game:GetService("ReplicatedStorage"):FindFirstChild("Ripper") then
    warn("You have Already Loaded")

    return true
end
local Test = Instance.new("Part")
Test.Name = "Ripper"
Test.Parent = game:GetService("ReplicatedStorage")
Test = 1

local SelfModules = {
    Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}
local achievementGiver = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors/Custom%20Achievements/Source.lua"))()

---====== Display achievement ======---
achievementGiver({
    Title = "Wow.",
    Desc = "Ripper remake",
    Reason = "Survive Ripper.",
    Image = "https://github.com/MuhXd/DoorSuff/blob/main/DoorsModes/Png.png?raw=true",
})
